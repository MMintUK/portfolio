"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = require("assert");

const HELMET_ATTRIBUTE = 'data-helmet';
const {
  hasOwnProperty
} = Object.prototype;

const extractHelmetNodes = (target, currentNode, dict = {}) => {
  const {
    content
  } = currentNode;

  if (!Array.isArray(content)) {
    return currentNode;
  }

  const helmetNodes = content.reduce((nodeList, childNode) => {
    const {
      [HELMET_ATTRIBUTE]: key,
      ...attrs
    } = childNode.attrs || {};

    if (typeof key !== 'undefined' && (key === '' || !dict[key])) {
      dict[key] = true;
      nodeList.push({ ...childNode,
        attrs
      });
    }

    return nodeList;
  }, []);
  const result = { ...currentNode,
    content: content.filter(({
      attrs
    }) => !(attrs && hasOwnProperty.call(attrs, HELMET_ATTRIBUTE))).map(childNode => extractHelmetNodes(target, childNode, dict))
  };
  target.push(...helmetNodes);
  return result;
};

var _default = tree => {
  const nodesToMove = [];
  tree.match({
    tag: 'body'
  }, node => extractHelmetNodes(nodesToMove, node));

  if (nodesToMove.length > 0) {
    tree.match({
      tag: 'head'
    }, node => ({ ...node,
      content: (node.content || []).concat(nodesToMove.splice(0))
    }));
  }

  (0, _assert.strictEqual)(nodesToMove.length, 0, 'Helmet: no head element found');
  return tree;
};

exports.default = _default;